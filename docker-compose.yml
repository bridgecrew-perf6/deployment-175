version: "3.9"
services:
  web:
    image: ghcr.io/gallereee/web:latest
    env_file:
      - ./.env
    environment:
      NODE_ENV: "production"
      NEXT_PUBLIC_API_HOST: ${API_HOST}
      PORT: ${WEB_PORT}
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
    restart: always

  api:
    image: ghcr.io/gallereee/api:latest
    env_file:
      - ./.env
    environment:
      NODE_ENV: "production"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT}"
      BOT_ACCESS_TOKEN: ${BOT_ACCESS_TOKEN}
      PORT: ${API_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      tg-bot:
        condition: service_started
    ports:
      - "${API_PORT}:${API_PORT}"
    networks:
      - postgres
      - redis
    restart: always

  tg-bot:
    image: ghcr.io/gallereee/tg-bot:latest
    env_file:
      - ./.env
    environment:
      NODE_ENV: "production"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
      REDIS_URL: "redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT}"
      BOT_ACCESS_TOKEN: ${BOT_ACCESS_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - postgres
      - redis
    restart: always

  postgres:
    image: postgres
    env_file:
      - ./.env
    command: "-p ${POSTGRES_PORT}"
    environment:
      - PGDATA=/data/postgres
    volumes:
      - ./postgres:/data/postgres
    networks:
      - postgres
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -p $$POSTGRES_PORT -d $$POSTGRES_DB -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis
    env_file:
      - ./.env
    command: "redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --port ${REDIS_PORT}"
    volumes:
      - ./redis:/data
    networks:
      - redis
    restart: always

networks:
  redis:
  postgres: